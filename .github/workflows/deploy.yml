name: deploy

on:
  push:
    tags:
      - 'v*.*.*'

jobs:

  create-windows-binaries:

    strategy:
      matrix:
        conf: [x86_64]
# Temporarily disable i686 binaries, they are failing on linking libdeflate
# and I don't have a Windows machine set up to experiment with fixing it.
#        conf: [x86_64, i686]

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install stable
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: ${{ matrix.conf }}-pc-windows-msvc
        override: true

    - name: Build oxipng
      run: |
        cargo build --release --target ${{ matrix.conf }}-pc-windows-msvc

    - name: Get the version
      shell: bash
      id: tagName
      run: |
        VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
        echo "::set-output name=tag::$VERSION"

    - name: Build package
      id: package
      shell: bash
      run: |
        ARCHIVE_TARGET="${{ matrix.conf }}-pc-windows-msvc"
        ARCHIVE_NAME="oxipng-${{ steps.tagName.outputs.tag }}-$ARCHIVE_TARGET"
        ARCHIVE_FILE="${ARCHIVE_NAME}.zip"
        mv LICENSE LICENSE.txt
        7z a ${ARCHIVE_FILE} \
             ./target/${{ matrix.conf }}-pc-windows-msvc/release/oxipng.exe \
             ./CHANGELOG.md ./LICENSE.txt ./README.md
        echo "::set-output name=file::${ARCHIVE_FILE}"
        echo "::set-output name=name::${ARCHIVE_NAME}.zip"

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.package.outputs.name }}
        path: ${{ steps.package.outputs.file }}

  create-unix-binaries:

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        target:
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
          - aarch64-linux-android
          - armv7-linux-androideabi
          - i686-linux-android
          - x86_64-linux-android
        exclude:
          # mac builds on linux
          - os: ubuntu-latest
            target: x86_64-apple-darwin
          # linux builds on MacOS
          - os: macos-latest
            target: x86_64-unknown-linux-musl
          # android builds on MacOS
          - os: macos-latest
            target: aarch64-linux-android
          - os: macos-latest
            target: armv7-linux-androideabi
          - os: macos-latest
            target: i686-linux-android
          - os: macos-latest
            target: x86_64-linux-android
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            strip: strip
          - os: macos-latest
            target: x86_64-apple-darwin
            strip: strip
          # android builds
          - os: ubuntu-latest
            target: aarch64-linux-android
            arch: arm64-v8a
            strip: llvm-strip
          - os: ubuntu-latest
            target: armv7-linux-androideabi
            arch: armeabi-v7a
            strip: llvm-strip
          - os: ubuntu-latest
            target: i686-linux-android
            arch: x86
            strip: llvm-strip
          - os: ubuntu-latest
            target: x86_64-linux-android
            arch: x86_64
            strip: llvm-strip

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Install NDK
      id: setup-ndk
      if: contains(matrix.target, 'android')
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25b
        add-to-path: false

    - name: Add NDK environment variables
      if: contains(matrix.target, 'android')
      run: |
        echo "ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
        echo "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

    - name: Install cargo-ndk
      if: contains(matrix.target, 'android')
      uses: baptiste0928/cargo-install@v1
      with:
        crate: cargo-ndk

    - name: Install musl
      if: contains(matrix.target, 'linux-musl')
      run: |
        sudo apt-get install musl-tools

    - name: Build oxipng
      if: "!contains(matrix.target, 'android')"
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Build oxipng (Android)
      if: contains(matrix.target, 'android')
      run: |
        cargo ndk -t ${{ matrix.arch }} build --release 

    - name: Strip binary
      run: |
        ${{ matrix.strip }} target/${{ matrix.target }}/release/oxipng

    - name: Get the version
      id: tagName
      run: |
        VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
        echo "::set-output name=tag::$VERSION"

    - name: Build package
      id: package
      run: |
        ARCHIVE_TARGET=${{ matrix.target }}
        ARCHIVE_NAME="oxipng-${{ steps.tagName.outputs.tag }}-$ARCHIVE_TARGET"
        ARCHIVE_FILE="${ARCHIVE_NAME}.tar.gz"
        mkdir "/tmp/${ARCHIVE_NAME}"
        cp README.md CHANGELOG.md LICENSE \
           target/${{ matrix.target }}/release/oxipng \
           /tmp/${ARCHIVE_NAME}
        tar -czf ${PWD}/${ARCHIVE_FILE} -C /tmp/ ${ARCHIVE_NAME}
        echo ::set-output "name=file::${ARCHIVE_FILE}"
        echo ::set-output "name=name::${ARCHIVE_NAME}.tar.gz"

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.package.outputs.name }}
        path: ${{ steps.package.outputs.file }}


  deploy:

    needs: [create-windows-binaries, create-unix-binaries]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Get version and release description
        id: tagName
        run: |
          VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
          tail -n +2 CHANGELOG.md | sed -e '/^$/,$d' > CHANGELOG.txt
          echo "::set-output name=tag::$VERSION"

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./binaries

      - name: Create a release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ steps.tagName.outputs.tag }}
          body_path: CHANGELOG.txt
          files: |
            ./binaries/**/*.zip
            ./binaries/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
